"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addFoodEntry: () => (/* binding */ addFoodEntry),\n/* harmony export */   addWaterEntry: () => (/* binding */ addWaterEntry),\n/* harmony export */   addWorkoutEntry: () => (/* binding */ addWorkoutEntry),\n/* harmony export */   calculateDailyStats: () => (/* binding */ calculateDailyStats),\n/* harmony export */   createUserProfile: () => (/* binding */ createUserProfile),\n/* harmony export */   deleteFoodEntry: () => (/* binding */ deleteFoodEntry),\n/* harmony export */   deleteWaterEntry: () => (/* binding */ deleteWaterEntry),\n/* harmony export */   deleteWorkoutEntry: () => (/* binding */ deleteWorkoutEntry),\n/* harmony export */   getAllFoods: () => (/* binding */ getAllFoods),\n/* harmony export */   getCurrentUser: () => (/* binding */ getCurrentUser),\n/* harmony export */   getDailyHistory: () => (/* binding */ getDailyHistory),\n/* harmony export */   getFoodById: () => (/* binding */ getFoodById),\n/* harmony export */   getFoodEntries: () => (/* binding */ getFoodEntries),\n/* harmony export */   getUserProfile: () => (/* binding */ getUserProfile),\n/* harmony export */   getWaterEntries: () => (/* binding */ getWaterEntries),\n/* harmony export */   getWorkoutEntries: () => (/* binding */ getWorkoutEntries),\n/* harmony export */   searchFoods: () => (/* binding */ searchFoods),\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   signUp: () => (/* binding */ signUp),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   updateDailyHistory: () => (/* binding */ updateDailyHistory),\n/* harmony export */   updateUserProfile: () => (/* binding */ updateUserProfile)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"your_supabase_project_url_here\";\nconst supabaseAnonKey = \"your_supabase_anon_key_here\";\nif (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error('Missing Supabase environment variables. Please check your .env.local file and ensure NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY are set.');\n}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Funções de autenticação\nconst signUp = async (email, password, name)=>{\n    const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n            data: {\n                name: name\n            }\n        }\n    });\n    return {\n        data,\n        error\n    };\n};\nconst signIn = async (email, password)=>{\n    const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n    });\n    return {\n        data,\n        error\n    };\n};\nconst signOut = async ()=>{\n    const { error } = await supabase.auth.signOut();\n    return {\n        error\n    };\n};\nconst getCurrentUser = async ()=>{\n    const { data: { user } } = await supabase.auth.getUser();\n    return user;\n};\n// Funções para refeições\nconst addFoodEntry = async (entry)=>{\n    const { data, error } = await supabase.from('food_entries').insert([\n        entry\n    ]).select();\n    return {\n        data,\n        error\n    };\n};\nconst getFoodEntries = async (userId, date)=>{\n    const { data, error } = await supabase.from('food_entries').select('*').eq('user_id', userId).eq('date', date).order('created_at', {\n        ascending: true\n    });\n    return {\n        data,\n        error\n    };\n};\nconst deleteFoodEntry = async (id)=>{\n    const { error } = await supabase.from('food_entries').delete().eq('id', id);\n    return {\n        error\n    };\n};\n// Funções para hidratação\nconst addWaterEntry = async (entry)=>{\n    const { data, error } = await supabase.from('water_entries').insert([\n        entry\n    ]).select();\n    return {\n        data,\n        error\n    };\n};\nconst getWaterEntries = async (userId, date)=>{\n    const { data, error } = await supabase.from('water_entries').select('*').eq('user_id', userId).eq('date', date).order('created_at', {\n        ascending: true\n    });\n    return {\n        data,\n        error\n    };\n};\nconst deleteWaterEntry = async (id)=>{\n    const { error } = await supabase.from('water_entries').delete().eq('id', id);\n    return {\n        error\n    };\n};\n// Funções para exercícios\nconst addWorkoutEntry = async (entry)=>{\n    const { data, error } = await supabase.from('workout_entries').insert([\n        entry\n    ]).select();\n    return {\n        data,\n        error\n    };\n};\nconst getWorkoutEntries = async (userId, date)=>{\n    const { data, error } = await supabase.from('workout_entries').select('*').eq('user_id', userId).eq('date', date).order('created_at', {\n        ascending: true\n    });\n    return {\n        data,\n        error\n    };\n};\nconst deleteWorkoutEntry = async (id)=>{\n    const { error } = await supabase.from('workout_entries').delete().eq('id', id);\n    return {\n        error\n    };\n};\n// Funções para perfil do usuário\nconst getUserProfile = async (userId)=>{\n    const { data, error } = await supabase.from('user_profiles').select('*').eq('user_id', userId).single();\n    return {\n        data,\n        error\n    };\n};\nconst createUserProfile = async (profile)=>{\n    try {\n        // Primeiro, tentar inserir um novo perfil\n        const { data, error } = await supabase.from('user_profiles').insert([\n            {\n                ...profile,\n                updated_at: new Date().toISOString()\n            }\n        ]).select().single();\n        if (error) {\n            // Se der erro de duplicata, fazer update\n            if (error.code === '23505') {\n                return await updateUserProfile(profile.user_id, profile);\n            }\n            throw error;\n        }\n        return {\n            data,\n            error: null\n        };\n    } catch (error) {\n        return {\n            data: null,\n            error\n        };\n    }\n};\nconst updateUserProfile = async (userId, updates)=>{\n    const { data, error } = await supabase.from('user_profiles').update({\n        ...updates,\n        updated_at: new Date().toISOString()\n    }).eq('user_id', userId).select().single();\n    // Se não encontrou registro para atualizar, criar um novo\n    if (error && error.code === 'PGRST116') {\n        return await supabase.from('user_profiles').insert([\n            {\n                user_id: userId,\n                ...updates,\n                updated_at: new Date().toISOString()\n            }\n        ]).select().single();\n    }\n    return {\n        data,\n        error\n    };\n};\n// Funções para base de dados de alimentos\nconst searchFoods = async (query)=>{\n    const { data, error } = await supabase.from('foods_database').select('*').ilike('name', \"%\".concat(query, \"%\")).order('name').limit(20);\n    return {\n        data,\n        error\n    };\n};\nconst getFoodById = async (id)=>{\n    const { data, error } = await supabase.from('foods_database').select('*').eq('id', id).single();\n    return {\n        data,\n        error\n    };\n};\nconst getAllFoods = async ()=>{\n    const { data, error } = await supabase.from('foods_database').select('*').order('name');\n    return {\n        data,\n        error\n    };\n};\n// Funções para histórico diário\nconst getDailyHistory = async (userId, startDate, endDate)=>{\n    let query = supabase.from('daily_history').select('*').eq('user_id', userId).order('date', {\n        ascending: false\n    });\n    if (startDate) {\n        query = query.gte('date', startDate);\n    }\n    if (endDate) {\n        query = query.lte('date', endDate);\n    }\n    const { data, error } = await query;\n    return {\n        data,\n        error\n    };\n};\nconst updateDailyHistory = async (userId, date, updates)=>{\n    const { data, error } = await supabase.from('daily_history').upsert({\n        user_id: userId,\n        date: date,\n        ...updates,\n        updated_at: new Date().toISOString()\n    }).select().single();\n    return {\n        data,\n        error\n    };\n};\n// Função para calcular e atualizar histórico diário automaticamente\nconst calculateDailyStats = async (userId, date)=>{\n    try {\n        var _foodResult_data, _waterResult_data, _workoutResult_data, _profileResult_data, _profileResult_data1;\n        // Buscar dados do dia\n        const [foodResult, waterResult, workoutResult, profileResult] = await Promise.all([\n            getFoodEntries(userId, date),\n            getWaterEntries(userId, date),\n            getWorkoutEntries(userId, date),\n            getUserProfile(userId)\n        ]);\n        const totalCalories = ((_foodResult_data = foodResult.data) === null || _foodResult_data === void 0 ? void 0 : _foodResult_data.reduce((sum, entry)=>sum + entry.calories, 0)) || 0;\n        const totalWater = ((_waterResult_data = waterResult.data) === null || _waterResult_data === void 0 ? void 0 : _waterResult_data.reduce((sum, entry)=>sum + entry.amount, 0)) || 0;\n        const totalWorkoutCalories = ((_workoutResult_data = workoutResult.data) === null || _workoutResult_data === void 0 ? void 0 : _workoutResult_data.reduce((sum, entry)=>sum + entry.calories, 0)) || 0;\n        const calorieGoal = ((_profileResult_data = profileResult.data) === null || _profileResult_data === void 0 ? void 0 : _profileResult_data.calorie_goal) || 2000;\n        const waterGoal = ((_profileResult_data1 = profileResult.data) === null || _profileResult_data1 === void 0 ? void 0 : _profileResult_data1.water_goal) || 2500;\n        // Atualizar histórico diário\n        await updateDailyHistory(userId, date, {\n            total_calories: totalCalories,\n            total_water: totalWater,\n            total_workout_calories: totalWorkoutCalories,\n            calorie_goal: calorieGoal,\n            water_goal: waterGoal\n        });\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Erro ao calcular estatísticas diárias:', error);\n        return {\n            success: false,\n            error\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9EO0FBRXBELE1BQU1DLGNBQWNDLGdDQUFvQztBQUN4RCxNQUFNRyxrQkFBa0JILDZCQUF5QztBQUVqRSxJQUFJLENBQUNELGVBQWUsQ0FBQ0ksaUJBQWlCO0lBQ3BDLE1BQU0sSUFBSUUsTUFDUjtBQUVKO0FBRU8sTUFBTUMsV0FBV1IsbUVBQVlBLENBQUNDLGFBQWFJLGlCQUFnQjtBQWtGbEUsMEJBQTBCO0FBQ25CLE1BQU1JLFNBQVMsT0FBT0MsT0FBZUMsVUFBa0JDO0lBQzVELE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNTixTQUFTTyxJQUFJLENBQUNOLE1BQU0sQ0FBQztRQUNqREM7UUFDQUM7UUFDQUssU0FBUztZQUNQSCxNQUFNO2dCQUNKRCxNQUFNQTtZQUNSO1FBQ0Y7SUFDRjtJQUNBLE9BQU87UUFBRUM7UUFBTUM7SUFBTTtBQUN2QixFQUFDO0FBRU0sTUFBTUcsU0FBUyxPQUFPUCxPQUFlQztJQUMxQyxNQUFNLEVBQUVFLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTU4sU0FBU08sSUFBSSxDQUFDRyxrQkFBa0IsQ0FBQztRQUM3RFI7UUFDQUM7SUFDRjtJQUNBLE9BQU87UUFBRUU7UUFBTUM7SUFBTTtBQUN2QixFQUFDO0FBRU0sTUFBTUssVUFBVTtJQUNyQixNQUFNLEVBQUVMLEtBQUssRUFBRSxHQUFHLE1BQU1OLFNBQVNPLElBQUksQ0FBQ0ksT0FBTztJQUM3QyxPQUFPO1FBQUVMO0lBQU07QUFDakIsRUFBQztBQUVNLE1BQU1NLGlCQUFpQjtJQUM1QixNQUFNLEVBQUVQLE1BQU0sRUFBRVEsSUFBSSxFQUFFLEVBQUUsR0FBRyxNQUFNYixTQUFTTyxJQUFJLENBQUNPLE9BQU87SUFDdEQsT0FBT0Q7QUFDVCxFQUFDO0FBRUQseUJBQXlCO0FBQ2xCLE1B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QUUsT0FBTTtRQUN0RixNQUFNQyx1QkFBdUJWLEVBQUFBLHNCQUFBQSxjQUFjMUQsSUFBSSxjQUFsQjBELDBDQUFBQSxvQkFBb0JLLE1BQU0sQ0FBQyxDQUFDQyxLQUFLckQsUUFBVXFELE1BQU1yRCxNQUFNc0QsUUFBUSxFQUFFLE9BQU07UUFFcEcsTUFBTUksY0FBY1YsRUFBQUEsc0JBQUFBLGNBQWMzRCxJQUFJLGNBQWxCMkQsMENBQUFBLG9CQUFvQlcsWUFBWSxLQUFJO1FBQ3hELE1BQU1DLFlBQVlaLEVBQUFBLHVCQUFBQSxjQUFjM0QsSUFBSSxjQUFsQjJELDJDQUFBQSxxQkFBb0JhLFVBQVUsS0FBSTtRQUVwRCw2QkFBNkI7UUFDN0IsTUFBTW5CLG1CQUFtQnJDLFFBQVFDLE1BQU07WUFDckN3RCxnQkFBZ0JYO1lBQ2hCWSxhQUFhUjtZQUNiUyx3QkFBd0JQO1lBQ3hCRSxjQUFjRDtZQUNkRyxZQUFZRDtRQUNkO1FBRUEsT0FBTztZQUFFSyxTQUFTO1FBQUs7SUFDekIsRUFBRSxPQUFPM0UsT0FBTztRQUNkNEUsUUFBUTVFLEtBQUssQ0FBQywwQ0FBMENBO1FBQ3hELE9BQU87WUFBRTJFLFNBQVM7WUFBTzNFO1FBQU07SUFDakM7QUFDRixFQUFDIiwic291cmNlcyI6WyIvaG9tZS9wcm9qZWN0L3NyYy9saWIvc3VwYWJhc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJ1xuXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTFxuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVlcblxuaWYgKCFzdXBhYmFzZVVybCB8fCAhc3VwYWJhc2VBbm9uS2V5KSB7XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAnTWlzc2luZyBTdXBhYmFzZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuIFBsZWFzZSBjaGVjayB5b3VyIC5lbnYubG9jYWwgZmlsZSBhbmQgZW5zdXJlIE5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCBhbmQgTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkgYXJlIHNldC4nXG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXkpXG5cbi8vIFRpcG9zIHBhcmEgbyBiYW5jbyBkZSBkYWRvc1xuZXhwb3J0IGludGVyZmFjZSBVc2VyIHtcbiAgaWQ6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgZW1haWw6IHN0cmluZ1xuICBjcmVhdGVkX2F0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb29kRW50cnkge1xuICBpZDogc3RyaW5nXG4gIHVzZXJfaWQ6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgY2Fsb3JpZXM6IG51bWJlclxuICBtZWFsOiAnYnJlYWtmYXN0JyB8ICdsdW5jaCcgfCAnZGlubmVyJyB8ICdzbmFjaydcbiAgdGltZTogc3RyaW5nXG4gIGRhdGU6IHN0cmluZ1xuICBjcmVhdGVkX2F0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXYXRlckVudHJ5IHtcbiAgaWQ6IHN0cmluZ1xuICB1c2VyX2lkOiBzdHJpbmdcbiAgYW1vdW50OiBudW1iZXJcbiAgdGltZTogc3RyaW5nXG4gIGRhdGU6IHN0cmluZ1xuICBjcmVhdGVkX2F0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXb3Jrb3V0RW50cnkge1xuICBpZDogc3RyaW5nXG4gIHVzZXJfaWQ6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgZHVyYXRpb246IG51bWJlclxuICBjYWxvcmllczogbnVtYmVyXG4gIHRpbWU6IHN0cmluZ1xuICBkYXRlOiBzdHJpbmdcbiAgY3JlYXRlZF9hdDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclByb2ZpbGUge1xuICBpZDogc3RyaW5nXG4gIHVzZXJfaWQ6IHN0cmluZ1xuICBoZWlnaHQ/OiBudW1iZXJcbiAgd2VpZ2h0PzogbnVtYmVyXG4gIHRhcmdldF93ZWlnaHQ/OiBudW1iZXJcbiAgYWdlPzogbnVtYmVyXG4gIGdlbmRlcj86ICdtYWxlJyB8ICdmZW1hbGUnIHwgJ290aGVyJ1xuICBhY3Rpdml0eV9sZXZlbD86ICdzZWRlbnRhcnknIHwgJ2xpZ2h0JyB8ICdtb2RlcmF0ZScgfCAnYWN0aXZlJyB8ICd2ZXJ5X2FjdGl2ZSdcbiAgY2Fsb3JpZV9nb2FsOiBudW1iZXJcbiAgd2F0ZXJfZ29hbDogbnVtYmVyXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZ1xuICB1cGRhdGVkX2F0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb29kRGF0YWJhc2Uge1xuICBpZDogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBjYWxvcmllc19wZXJfMTAwZzogbnVtYmVyXG4gIHByb3RlaW5fcGVyXzEwMGc/OiBudW1iZXJcbiAgY2FyYnNfcGVyXzEwMGc/OiBudW1iZXJcbiAgZmF0X3Blcl8xMDBnPzogbnVtYmVyXG4gIGZpYmVyX3Blcl8xMDBnPzogbnVtYmVyXG4gIGNhdGVnb3J5Pzogc3RyaW5nXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhaWx5SGlzdG9yeSB7XG4gIGlkOiBzdHJpbmdcbiAgdXNlcl9pZDogc3RyaW5nXG4gIGRhdGU6IHN0cmluZ1xuICB0b3RhbF9jYWxvcmllczogbnVtYmVyXG4gIHRvdGFsX3dhdGVyOiBudW1iZXJcbiAgdG90YWxfd29ya291dF9jYWxvcmllczogbnVtYmVyXG4gIGNhbG9yaWVfZ29hbDogbnVtYmVyXG4gIHdhdGVyX2dvYWw6IG51bWJlclxuICB3ZWlnaHQ/OiBudW1iZXJcbiAgY3JlYXRlZF9hdDogc3RyaW5nXG4gIHVwZGF0ZWRfYXQ6IHN0cmluZ1xufVxuXG4vLyBGdW7Dp8O1ZXMgZGUgYXV0ZW50aWNhw6fDo29cbmV4cG9ydCBjb25zdCBzaWduVXAgPSBhc3luYyAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgbmFtZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnblVwKHtcbiAgICBlbWFpbCxcbiAgICBwYXNzd29yZCxcbiAgICBvcHRpb25zOiB7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIHJldHVybiB7IGRhdGEsIGVycm9yIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNpZ25JbiA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbkluV2l0aFBhc3N3b3JkKHtcbiAgICBlbWFpbCxcbiAgICBwYXNzd29yZFxuICB9KVxuICByZXR1cm4geyBkYXRhLCBlcnJvciB9XG59XG5cbmV4cG9ydCBjb25zdCBzaWduT3V0ID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLnNpZ25PdXQoKVxuICByZXR1cm4geyBlcnJvciB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRDdXJyZW50VXNlciA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkYXRhOiB7IHVzZXIgfSB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRVc2VyKClcbiAgcmV0dXJuIHVzZXJcbn1cblxuLy8gRnVuw6fDtWVzIHBhcmEgcmVmZWnDp8O1ZXNcbmV4cG9ydCBjb25zdCBhZGRGb29kRW50cnkgPSBhc3luYyAoZW50cnk6IE9taXQ8Rm9vZEVudHJ5LCAnaWQnIHwgJ2NyZWF0ZWRfYXQnPikgPT4ge1xuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgIC5mcm9tKCdmb29kX2VudHJpZXMnKVxuICAgIC5pbnNlcnQoW2VudHJ5XSlcbiAgICAuc2VsZWN0KClcbiAgcmV0dXJuIHsgZGF0YSwgZXJyb3IgfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0Rm9vZEVudHJpZXMgPSBhc3luYyAodXNlcklkOiBzdHJpbmcsIGRhdGU6IHN0cmluZykgPT4ge1xuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgIC5mcm9tKCdmb29kX2VudHJpZXMnKVxuICAgIC5zZWxlY3QoJyonKVxuICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZClcbiAgICAuZXEoJ2RhdGUnLCBkYXRlKVxuICAgIC5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiB0cnVlIH0pXG4gIHJldHVybiB7IGRhdGEsIGVycm9yIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRlbGV0ZUZvb2RFbnRyeSA9IGFzeW5jIChpZDogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oJ2Zvb2RfZW50cmllcycpXG4gICAgLmRlbGV0ZSgpXG4gICAgLmVxKCdpZCcsIGlkKVxuICByZXR1cm4geyBlcnJvciB9XG59XG5cbi8vIEZ1bsOnw7VlcyBwYXJhIGhpZHJhdGHDp8Ojb1xuZXhwb3J0IGNvbnN0IGFkZFdhdGVyRW50cnkgPSBhc3luYyAoZW50cnk6IE9taXQ8V2F0ZXJFbnRyeSwgJ2lkJyB8ICdjcmVhdGVkX2F0Jz4pID0+IHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbSgnd2F0ZXJfZW50cmllcycpXG4gICAgLmluc2VydChbZW50cnldKVxuICAgIC5zZWxlY3QoKVxuICByZXR1cm4geyBkYXRhLCBlcnJvciB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRXYXRlckVudHJpZXMgPSBhc3luYyAodXNlcklkOiBzdHJpbmcsIGRhdGU6IHN0cmluZykgPT4ge1xuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgIC5mcm9tKCd3YXRlcl9lbnRyaWVzJylcbiAgICAuc2VsZWN0KCcqJylcbiAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpXG4gICAgLmVxKCdkYXRlJywgZGF0ZSlcbiAgICAub3JkZXIoJ2NyZWF0ZWRfYXQnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuICByZXR1cm4geyBkYXRhLCBlcnJvciB9XG59XG5cbmV4cG9ydCBjb25zdCBkZWxldGVXYXRlckVudHJ5ID0gYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbSgnd2F0ZXJfZW50cmllcycpXG4gICAgLmRlbGV0ZSgpXG4gICAgLmVxKCdpZCcsIGlkKVxuICByZXR1cm4geyBlcnJvciB9XG59XG5cbi8vIEZ1bsOnw7VlcyBwYXJhIGV4ZXJjw61jaW9zXG5leHBvcnQgY29uc3QgYWRkV29ya291dEVudHJ5ID0gYXN5bmMgKGVudHJ5OiBPbWl0PFdvcmtvdXRFbnRyeSwgJ2lkJyB8ICdjcmVhdGVkX2F0Jz4pID0+IHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbSgnd29ya291dF9lbnRyaWVzJylcbiAgICAuaW5zZXJ0KFtlbnRyeV0pXG4gICAgLnNlbGVjdCgpXG4gIHJldHVybiB7IGRhdGEsIGVycm9yIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldFdvcmtvdXRFbnRyaWVzID0gYXN5bmMgKHVzZXJJZDogc3RyaW5nLCBkYXRlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbSgnd29ya291dF9lbnRyaWVzJylcbiAgICAuc2VsZWN0KCcqJylcbiAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpXG4gICAgLmVxKCdkYXRlJywgZGF0ZSlcbiAgICAub3JkZXIoJ2NyZWF0ZWRfYXQnLCB7IGFzY2VuZGluZzogdHJ1ZSB9KVxuICByZXR1cm4geyBkYXRhLCBlcnJvciB9XG59XG5cbmV4cG9ydCBjb25zdCBkZWxldGVXb3Jrb3V0RW50cnkgPSBhc3luYyAoaWQ6IHN0cmluZykgPT4ge1xuICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgIC5mcm9tKCd3b3Jrb3V0X2VudHJpZXMnKVxuICAgIC5kZWxldGUoKVxuICAgIC5lcSgnaWQnLCBpZClcbiAgcmV0dXJuIHsgZXJyb3IgfVxufVxuXG4vLyBGdW7Dp8O1ZXMgcGFyYSBwZXJmaWwgZG8gdXN1w6FyaW9cbmV4cG9ydCBjb25zdCBnZXRVc2VyUHJvZmlsZSA9IGFzeW5jICh1c2VySWQ6IHN0cmluZykgPT4ge1xuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgIC5mcm9tKCd1c2VyX3Byb2ZpbGVzJylcbiAgICAuc2VsZWN0KCcqJylcbiAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpXG4gICAgLnNpbmdsZSgpXG4gIHJldHVybiB7IGRhdGEsIGVycm9yIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVVzZXJQcm9maWxlID0gYXN5bmMgKHByb2ZpbGU6IE9taXQ8VXNlclByb2ZpbGUsICdpZCcgfCAnY3JlYXRlZF9hdCcgfCAndXBkYXRlZF9hdCc+KSA9PiB7XG4gIHRyeSB7XG4gICAgLy8gUHJpbWVpcm8sIHRlbnRhciBpbnNlcmlyIHVtIG5vdm8gcGVyZmlsXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1c2VyX3Byb2ZpbGVzJylcbiAgICAgIC5pbnNlcnQoW3tcbiAgICAgICAgLi4ucHJvZmlsZSxcbiAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9XSlcbiAgICAgIC5zZWxlY3QoKVxuICAgICAgLnNpbmdsZSgpXG4gICAgXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAvLyBTZSBkZXIgZXJybyBkZSBkdXBsaWNhdGEsIGZhemVyIHVwZGF0ZVxuICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICcyMzUwNScpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHVwZGF0ZVVzZXJQcm9maWxlKHByb2ZpbGUudXNlcl9pZCwgcHJvZmlsZSlcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7IGRhdGEsIGVycm9yOiBudWxsIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHVwZGF0ZVVzZXJQcm9maWxlID0gYXN5bmMgKHVzZXJJZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPFVzZXJQcm9maWxlPikgPT4ge1xuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgIC5mcm9tKCd1c2VyX3Byb2ZpbGVzJylcbiAgICAudXBkYXRlKHtcbiAgICAgIC4uLnVwZGF0ZXMsXG4gICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9KVxuICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZClcbiAgICAuc2VsZWN0KClcbiAgICAuc2luZ2xlKClcbiAgXG4gIC8vIFNlIG7Do28gZW5jb250cm91IHJlZ2lzdHJvIHBhcmEgYXR1YWxpemFyLCBjcmlhciB1bSBub3ZvXG4gIGlmIChlcnJvciAmJiBlcnJvci5jb2RlID09PSAnUEdSU1QxMTYnKSB7XG4gICAgcmV0dXJuIGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgndXNlcl9wcm9maWxlcycpXG4gICAgICAuaW5zZXJ0KFt7XG4gICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgLi4udXBkYXRlcyxcbiAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9XSlcbiAgICAgIC5zZWxlY3QoKVxuICAgICAgLnNpbmdsZSgpXG4gIH1cbiAgXG4gIHJldHVybiB7IGRhdGEsIGVycm9yIH1cbn1cblxuLy8gRnVuw6fDtWVzIHBhcmEgYmFzZSBkZSBkYWRvcyBkZSBhbGltZW50b3NcbmV4cG9ydCBjb25zdCBzZWFyY2hGb29kcyA9IGFzeW5jIChxdWVyeTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oJ2Zvb2RzX2RhdGFiYXNlJylcbiAgICAuc2VsZWN0KCcqJylcbiAgICAuaWxpa2UoJ25hbWUnLCBgJSR7cXVlcnl9JWApXG4gICAgLm9yZGVyKCduYW1lJylcbiAgICAubGltaXQoMjApXG4gIHJldHVybiB7IGRhdGEsIGVycm9yIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldEZvb2RCeUlkID0gYXN5bmMgKGlkOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAuZnJvbSgnZm9vZHNfZGF0YWJhc2UnKVxuICAgIC5zZWxlY3QoJyonKVxuICAgIC5lcSgnaWQnLCBpZClcbiAgICAuc2luZ2xlKClcbiAgcmV0dXJuIHsgZGF0YSwgZXJyb3IgfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0QWxsRm9vZHMgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oJ2Zvb2RzX2RhdGFiYXNlJylcbiAgICAuc2VsZWN0KCcqJylcbiAgICAub3JkZXIoJ25hbWUnKVxuICByZXR1cm4geyBkYXRhLCBlcnJvciB9XG59XG5cbi8vIEZ1bsOnw7VlcyBwYXJhIGhpc3TDs3JpY28gZGnDoXJpb1xuZXhwb3J0IGNvbnN0IGdldERhaWx5SGlzdG9yeSA9IGFzeW5jICh1c2VySWQ6IHN0cmluZywgc3RhcnREYXRlPzogc3RyaW5nLCBlbmREYXRlPzogc3RyaW5nKSA9PiB7XG4gIGxldCBxdWVyeSA9IHN1cGFiYXNlXG4gICAgLmZyb20oJ2RhaWx5X2hpc3RvcnknKVxuICAgIC5zZWxlY3QoJyonKVxuICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZClcbiAgICAub3JkZXIoJ2RhdGUnLCB7IGFzY2VuZGluZzogZmFsc2UgfSlcblxuICBpZiAoc3RhcnREYXRlKSB7XG4gICAgcXVlcnkgPSBxdWVyeS5ndGUoJ2RhdGUnLCBzdGFydERhdGUpXG4gIH1cbiAgaWYgKGVuZERhdGUpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5Lmx0ZSgnZGF0ZScsIGVuZERhdGUpXG4gIH1cblxuICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBxdWVyeVxuICByZXR1cm4geyBkYXRhLCBlcnJvciB9XG59XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVEYWlseUhpc3RvcnkgPSBhc3luYyAodXNlcklkOiBzdHJpbmcsIGRhdGU6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxEYWlseUhpc3Rvcnk+KSA9PiB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oJ2RhaWx5X2hpc3RvcnknKVxuICAgIC51cHNlcnQoe1xuICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgIC4uLnVwZGF0ZXMsXG4gICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICB9KVxuICAgIC5zZWxlY3QoKVxuICAgIC5zaW5nbGUoKVxuICByZXR1cm4geyBkYXRhLCBlcnJvciB9XG59XG5cbi8vIEZ1bsOnw6NvIHBhcmEgY2FsY3VsYXIgZSBhdHVhbGl6YXIgaGlzdMOzcmljbyBkacOhcmlvIGF1dG9tYXRpY2FtZW50ZVxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZURhaWx5U3RhdHMgPSBhc3luYyAodXNlcklkOiBzdHJpbmcsIGRhdGU6IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIC8vIEJ1c2NhciBkYWRvcyBkbyBkaWFcbiAgICBjb25zdCBbZm9vZFJlc3VsdCwgd2F0ZXJSZXN1bHQsIHdvcmtvdXRSZXN1bHQsIHByb2ZpbGVSZXN1bHRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgZ2V0Rm9vZEVudHJpZXModXNlcklkLCBkYXRlKSxcbiAgICAgIGdldFdhdGVyRW50cmllcyh1c2VySWQsIGRhdGUpLFxuICAgICAgZ2V0V29ya291dEVudHJpZXModXNlcklkLCBkYXRlKSxcbiAgICAgIGdldFVzZXJQcm9maWxlKHVzZXJJZClcbiAgICBdKVxuXG4gICAgY29uc3QgdG90YWxDYWxvcmllcyA9IGZvb2RSZXN1bHQuZGF0YT8ucmVkdWNlKChzdW0sIGVudHJ5KSA9PiBzdW0gKyBlbnRyeS5jYWxvcmllcywgMCkgfHwgMFxuICAgIGNvbnN0IHRvdGFsV2F0ZXIgPSB3YXRlclJlc3VsdC5kYXRhPy5yZWR1Y2UoKHN1bSwgZW50cnkpID0+IHN1bSArIGVudHJ5LmFtb3VudCwgMCkgfHwgMFxuICAgIGNvbnN0IHRvdGFsV29ya291dENhbG9yaWVzID0gd29ya291dFJlc3VsdC5kYXRhPy5yZWR1Y2UoKHN1bSwgZW50cnkpID0+IHN1bSArIGVudHJ5LmNhbG9yaWVzLCAwKSB8fCAwXG5cbiAgICBjb25zdCBjYWxvcmllR29hbCA9IHByb2ZpbGVSZXN1bHQuZGF0YT8uY2Fsb3JpZV9nb2FsIHx8IDIwMDBcbiAgICBjb25zdCB3YXRlckdvYWwgPSBwcm9maWxlUmVzdWx0LmRhdGE/LndhdGVyX2dvYWwgfHwgMjUwMFxuXG4gICAgLy8gQXR1YWxpemFyIGhpc3TDs3JpY28gZGnDoXJpb1xuICAgIGF3YWl0IHVwZGF0ZURhaWx5SGlzdG9yeSh1c2VySWQsIGRhdGUsIHtcbiAgICAgIHRvdGFsX2NhbG9yaWVzOiB0b3RhbENhbG9yaWVzLFxuICAgICAgdG90YWxfd2F0ZXI6IHRvdGFsV2F0ZXIsXG4gICAgICB0b3RhbF93b3Jrb3V0X2NhbG9yaWVzOiB0b3RhbFdvcmtvdXRDYWxvcmllcyxcbiAgICAgIGNhbG9yaWVfZ29hbDogY2Fsb3JpZUdvYWwsXG4gICAgICB3YXRlcl9nb2FsOiB3YXRlckdvYWxcbiAgICB9KVxuXG4gICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJybyBhbyBjYWxjdWxhciBlc3RhdMOtc3RpY2FzIGRpw6FyaWFzOicsIGVycm9yKVxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvciB9XG4gIH1cbn0iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJFcnJvciIsInN1cGFiYXNlIiwic2lnblVwIiwiZW1haWwiLCJwYXNzd29yZCIsIm5hbWUiLCJkYXRhIiwiZXJyb3IiLCJhdXRoIiwib3B0aW9ucyIsInNpZ25JbiIsInNpZ25JbldpdGhQYXNzd29yZCIsInNpZ25PdXQiLCJnZXRDdXJyZW50VXNlciIsInVzZXIiLCJnZXRVc2VyIiwiYWRkRm9vZEVudHJ5IiwiZW50cnkiLCJmcm9tIiwiaW5zZXJ0Iiwic2VsZWN0IiwiZ2V0Rm9vZEVudHJpZXMiLCJ1c2VySWQiLCJkYXRlIiwiZXEiLCJvcmRlciIsImFzY2VuZGluZyIsImRlbGV0ZUZvb2RFbnRyeSIsImlkIiwiZGVsZXRlIiwiYWRkV2F0ZXJFbnRyeSIsImdldFdhdGVyRW50cmllcyIsImRlbGV0ZVdhdGVyRW50cnkiLCJhZGRXb3Jrb3V0RW50cnkiLCJnZXRXb3Jrb3V0RW50cmllcyIsImRlbGV0ZVdvcmtvdXRFbnRyeSIsImdldFVzZXJQcm9maWxlIiwic2luZ2xlIiwiY3JlYXRlVXNlclByb2ZpbGUiLCJwcm9maWxlIiwidXBkYXRlZF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImNvZGUiLCJ1cGRhdGVVc2VyUHJvZmlsZSIsInVzZXJfaWQiLCJ1cGRhdGVzIiwidXBkYXRlIiwic2VhcmNoRm9vZHMiLCJxdWVyeSIsImlsaWtlIiwibGltaXQiLCJnZXRGb29kQnlJZCIsImdldEFsbEZvb2RzIiwiZ2V0RGFpbHlIaXN0b3J5Iiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImd0ZSIsImx0ZSIsInVwZGF0ZURhaWx5SGlzdG9yeSIsInVwc2VydCIsImNhbGN1bGF0ZURhaWx5U3RhdHMiLCJmb29kUmVzdWx0Iiwid2F0ZXJSZXN1bHQiLCJ3b3Jrb3V0UmVzdWx0IiwicHJvZmlsZVJlc3VsdCIsIlByb21pc2UiLCJhbGwiLCJ0b3RhbENhbG9yaWVzIiwicmVkdWNlIiwic3VtIiwiY2Fsb3JpZXMiLCJ0b3RhbFdhdGVyIiwiYW1vdW50IiwidG90YWxXb3Jrb3V0Q2Fsb3JpZXMiLCJjYWxvcmllR29hbCIsImNhbG9yaWVfZ29hbCIsIndhdGVyR29hbCIsIndhdGVyX2dvYWwiLCJ0b3RhbF9jYWxvcmllcyIsInRvdGFsX3dhdGVyIiwidG90YWxfd29ya291dF9jYWxvcmllcyIsInN1Y2Nlc3MiLCJjb25zb2xlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/supabase.ts\n"));

/***/ })

});